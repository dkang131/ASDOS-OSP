M.r[, colnames(M.r) != "W"]
M.r > 12
M.r[M.r > 12]
M.r = rbind(a,b)
M.r
x = seq(-3,3,0.5)
y = exp(-x)
y
d = (1:100)
d
e = rep(7,100)
e
D = matrix(c(1:100),10,10)
D
# 12.
D <- matrix(d,10,10);
D
E = matrix(c(1/d),10,10,byrow=T)
E
View(E)
View(E)
E <- matrix(v,10,10,byrow=TRUE);
v <- 1/(1:100);
E <- matrix(v,10,10,byrow=TRUE);
E
# 17.
price = c(2,3,5,3,2,5,7,4,2,5)
returns = diff(log(price))
returns
lp = log(prices)
lp = log(price)
lp
lp-price
price-lp
D+E
D-E
D %*% E
D * E
P = D%*%E
diag(P)
P[row(P)==col(P)]
# 15.
x <- c(-10, 0, 0.1, 10, 1000, 100000)
y1 <- x^5 + x^4 + x^3 + x^2 + x+1
y2 <- 1 + x*(1 + x*( 1+ x*( 1+x*( 1+x ))))
y1
y2
grid <- seq(0,2*pi)
sin.grid <- sin(grid)
cos.grid <- cos(grid)
tan.grid <- tan(grid)
diff.grid <- sin.grid/cos.grid - tan.grid
diff.grid
grid = seq(0, 2*pi, length.out = 20)
sin.g = sin(grid)
cos.g = cos(grid)
tan.g = tan(grid)
diff.sct = sin.g/cos.g - tan.g
diff.sct
diff.grid
tan.grid
sin.grid/cos.grid
prod(D,E)
library(pracma)
dot(D,E)
D %*% E
D
E
dot(D,E)
D * E
length(which(sin.g > 0)) / length(which(sin.g < 0))
length(sin.g[sin.g > 0]) / length(sin.g[sin.g < 0])
sin.9
sin.g
returns = diff(log(price))
return = log(price[-1]/price[-length(price)])
returns
return
price[-1]
price[-length(price)]
# 19. refers to # 16
length(which(sin.g > 0)) / length(which(sin.g < 0))
sin.9
sin.g
D+E
D-E
D %*% E
D * E
View(D%*%E)
View(D*E)
diag(P)
P[row(P)==col(P)]
x <- c(-10, 0, 0.1, 10, 1000, 100000)
y1 <- x^5 + x^4 + x^3 + x^2 + x+1
y2 <- 1 + x*(1 + x*( 1+ x*( 1+x*( 1+x ))))
y1
y2
grid <- seq(0,2*pi)
grid
grid <- seq(0,2*pi, length.out=10)
grid
grid <- seq(0,2*pi, length.out=10)
grid <- seq(0,2*pi, length.out=10);grid
grid <- seq(0,2*pi)
grid <- seq(0,2*pi);grid
grid <- seq(0,2*pi, length.out=10);grid
# grid <- seq(0,2*pi);grid
sin.grid <- sin(grid)
cos.grid <- cos(grid)
tan.grid <- tan(grid)
diff.grid <- sin.grid/cos.grid - tan.grid
diff.grid
tan.grid
sin.grid/cos.grid
price = c(2,3,5,3,2,5,7,4,2,5)
returns = diff(log(price))
return = log(price[-1]/price[-length(price)])
returns
return
ch.points = c(1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6)
which(diff(ch.points) == 1)
diff(ch.points)
B = pascal(3)
B
length(which(sin.grid > 0)) / length(which(sin.grid < 0))
# grid <- seq(0,2*pi);grid
sin.grid <- sin(grid)
sin.grid
A = rbind(
c(-1.00,  3.71,  2.80, 0.01,  1.19),
c( 0.40, -1.81, -1.96, 1.84,  1.74),
c(-4.30,  1.71,  0.68, 0.11,  3.44),
c( 0.03,  3.90,  0.41, 0.02,  1.05),
c( 0.24, -0.01,  2.10, 2.87, -3.57))
det(A)
inv.A = solve(A)
inv.A
inv.A %*% A
B = pascal(3)
B
C = matrix(1:9,nrow = 3, ncol = 3)
C
D = B
B[upper.tri(B, diag = F)] = C[upper.tri(C, diag = F)]
B
C
C[upper.tri(C, diag = F)] = D[upper.tri(D, diag = F)]
C
B[upper.tri(B, diag = T)] = C[upper.tri(C, diag = T)]
B
C[upper.tri(C, diag = T)] = D[upper.tri(D, diag = T)]
C
B[lower.tri(B, diag = F)] = 0
B
B = pascal(3)
B[lower.tri(B, diag = F)] = 0
B
C[lower.tri(C, diag = F)] = 0
C
C = matrix(1:9,nrow = 3, ncol = 3)
C[lower.tri(C, diag = F)] = 0
C
B = pascal(3)
B
C = matrix(1:9,nrow = 3, ncol = 3)
C
y = c(529.0, 530.0, 532.0, 533.1, 533.4, 533.6, 533.7, 534.1, 534.8, 535.3,
535.4, 535.9, 536.1, 536.3, 536.4, 536.6, 537.0, 537.4, 537.5, 538.3,
538.5, 538.6, 539.4, 539.6, 540.4, 540.8, 542.0, 542.8, 543.0, 543.5,
543.8, 543.9, 545.3, 546.2, 548.8, 548.7, 548.9, 549.0, 549.4, 549.9,
550.6, 551.2, 551.4, 551.5, 551.6, 552.8, 552.9,553.2)
mean(y)
factorial <- function(input){
base = 1
res = 0
if(input < 2){
print(base)
}else{
print(input * factorial(input-1))
}
}
factorial(0)
factorial(1)
factorial(3)
factorial <- function(input){
base = 1
if(input < 2){
print(base)
}else{
print(input * factorial(input-1))
}
}
factorial(3)
factorial <- function(input){
base = 1
if(input < 2){
print(base)
}
for(i in 2:input+1){
base = base * i
}
return(base)
}
factorial(0)
factorial(1)
factorial <- function(input){
base = 1
if(input < 2){
print(base)
}else{
for(i in 2:input+1){
base = base * i
}
}
return(base)
}
factorial(0)
factorial(1)
factorial(3)
factorial <- function(input){
base = 1
for(i in 2:input+1){
base = base * i
}
return(base)
}
factorial(0)
factorial(1)
factorial(3)
factorial <- function(input){
if(input <= 1){
return(1)
}else{
return(input * factorial(input-1))
}
}
factorial(0)
factorial(1)
factorial(3)
factorial(4)
prima <- function(input){
if(input <= 1){
print('Not Prime')
}
for(i in 2:int/2){
if(input %% i == 0){
prime <- FALSE
}
}
}
prima(3)
prima(3)
prima <- function(input){
if(input <= 1){
print('Not Prime')
}
for(i in 2:input/2){
if(input %% i == 0){
prime <- FALSE
}
}
}
prima(3)
prima <- function(input){
if(input <= 1){
print('Not Prime')
}
for(i in 2:input/2){
if(input %% i == 0){
return(F)
}
}
}
prima(3)
isprime <- function(input){
if(input <= 1){
return(F)
}
for(i in 2:input/2 + 1){
if(input %% i == 0){
return(F)
}
}
return(T)
}
isprime(3)
isprime(5)
isprime(7)
isprime <- function(input){
if(input <= 1){
return(F)
}
for(i in 2:round(input/2)){
if(input %% i == 0){
return(F)
}
}
return(T)
}
isprime(3)
isprime(7)
isprime(9)
isprime(37)
isprime(5)
isprime(2)
isprime <- function(input){
if(input <= 1){
return(F)
}
for(i in 2:round(input/2) + 1){
if(input %% i == 0){
return(F)
}
}
return(T)
}
isprime(2)
isprime(3)
isprime(5)
isprime(37)
isprime <- function(input){
if(input <= 1){
return(F)
}
for(i in 2:round(input/2)){
if(input %% i == 0){
return(F)
}
}
return(T)
}
isprime(2)
isprime(3)
isprime(5)
isprime(37)
isprime <- function(input){
if(input <= 1){
return(F)
}
if(input == 2){
return(T)
}
for(i in 2:round(input/2)){
if(input %% i == 0){
return(F)
}
}
return(T)
}
isprime(2)
isprime(3)
isprime(5)
isprime(37)
factorial <- function(input){
if(input <= 1){
return(1)
}else{
return(input * factorial(input-1))
}
}
rm(list=ls())
y = c(134350, 151960, 199192, 211497, 216735, 243200, 289418, 592916, 678343,
691260, 739669, 757665, 781417, 846126, 857818, 877432, 964253, 984162,
1086620, 1105337, 1117033, 1133584, 1136632, 1137227, 1159965, 1209543,
1240322, 1315125, 1332664, 1335972, 1371509, 1619035, 1656020, 1731731,
2103401, 2567718, 2685900, 2887223)
exp <- rep(c(1/38), length = length(y))
sum(exp)
chisq.test(y,exp)
chisq.test(x = y,p = exp)
exp
View(exp)
exp
setwd("C:/Users/darre/Desktop/ASDOS OSP/W8")
rm(list=ls())
#### Number 1 ####
data1 <- read.csv('data_ets', header = T)
#### Number 1 ####
data1 <- read.csv('data_ets.csv', header = T)
head(data1)
#### Number 1 ####
data1 <- read.csv('data_ets.csv', header = T, sep=";")
head(data1)
prestige_label = matrix(0, nrow=nrow(data1))
attach(data1)
for(i in 1:nrow(data1)){
if(Prestige[i] > 80){
prestige_label[i] = 1
}else{
prestige_label[i] = 0
}
}
head(prestige_label)
data2 <- data.frame(data1, prestige_label)
head(data2)
tapply(Income, prestige_label, mean)
tapply(Education, prestige_label, mean)
tapply(Prestige, prestige_label, mean)
#### Number 2 ####
data_cor <- data.frame(Income, Education)
datakorelasi <- matrix(0, nrow=nrow(data_cor)-1)
data_cor[-1]
data_cor[,-1]
data_cor[1]
data_cor[1,1]
data_cor[,1]
data[1:]
data[1,]
data_cor[1,]
data_cor[-1,]
cor(data_cor[-1,])
cor(data_cor[-1,])$2
cor(data_cor[-1,])$[1]
cor(data_cor[-1,])[1]
cor(data_cor[-1,])[2]
for(i in 1:nrow(data_cor)){
datakorelasi[i] <- cor(data_cor[-i,])[2]
}
datakorelasi
cor(data_cor[-45,])
cor(data_cor[-2,])
cor(data_cor[-1,])
cor(data_cor[-44,])
write.csv(datakorelasi, 'datakorelasi.csv', row.names = F, col.names = T)
write.csv(datakorelasi, 'datakorelasi.csv', row.names = F)
myFunction <- function(input){
datacor <- matrix(0, nrow = nrow(input))
for(i in 1:nrow(input)){
datacor[i] <- cor(input[-i,])[2]
}
return(datacor)
}
myFunction(data_cor)
myFunction <- function(input){
datacor <- matrix(0, nrow = nrow(input))
for(i in 1:nrow(input)){
datacor[i] <- cor(input[-i,])[2]
}
#return(datacor)
write.csv(datacor, 'hasil_function.csv', row.names = F)
}
myFunction(data_cor)
rm(list=ls())
setwd("C:/Users/darre/Desktop/ASDOS OSP/W8")
#### Number 1 ####
data1 <- read.csv('data_ets.csv', header = T, sep=";")
head(data1)
attach(data1)
prestige_label = matrix(0, nrow=nrow(data1))
for(i in 1:nrow(data1)){
if(Prestige[i] > 80){
prestige_label[i] = 1
}else{
prestige_label[i] = 0
}
}
data2 <- data.frame(data1, prestige_label)
head(data2)
tapply(Income, prestige_label, mean)
tapply(Education, prestige_label, mean)
tapply(Prestige, prestige_label, mean)
# scatterplot Income vs Education
colors <- c("red", "green")
win.graph()
plot(Income, Education, col=colors[prestige_label])
head(data2)
plot(Income, Education, col=colors[factor(prestige_label)])
win.graph()
plot(Income, Education, col=colors[factor(prestige_label)])
# scatterplot Income vs Prestige
win.graph()
plot(Income, Prestige, col=colors[factor(prestige_label)])
# scatterplot Education vs Prestige
win.graph()
plot(Income, Education, col=colors[factor(prestige_label)])
win.graph()
plot(Income, Education, col=colors[factor(prestige_label)])
win.graph()
plot(Education, Prestige, col=colors[factor(prestige_label)])
legend("topleft", legend = c(factor(prestige_label)))
win.graph()
plot(Income, Education, col=colors[factor(prestige_label)])
legend("topleft", legend = c(factor(prestige_label)))
win.graph()
plot(Income, Education, col=colors[factor(prestige_label)])
legend("topleft", legend = c(factor(prestige_label)), col = c("red", "green"))
win.graph()
plot(Income, Education, col=colors[factor(prestige_label)])
legend("topleft", legend = levels(factor(prestige_label)), col = colors)
# scatterplot Income vs Education
colors <- c("red", "green")
colors <- c("red", "green")
win.graph()
plot(Income, Education, col=colors[factor(prestige_label)])
legend("topleft", legend = levels(factor(prestige_label)), col = colors)
win.graph()
plot(Income, Education, col=colors[factor(prestige_label)])
legend("topleft", legend = levels(factor(prestige_label)), col = c("red","green"))
win.graph()
plot(Income, Education, col=colors[factor(prestige_label)])
legend("topleft", legend = levels(factor(prestige_label)), col = colors, pch=1)
win.graph()
plot(Income, Prestige, col=colors[factor(prestige_label)])
legend("topleft", legend = levels(factor(prestige_label)), col = colors, pch=1)
plot(Education, Prestige, col=colors[factor(prestige_label)])
win.graph()
plot(Education, Prestige, col=colors[factor(prestige_label)])
legend("topleft", legend = levels(factor(prestige_label)), col = colors, pch=1)
factor(prestige_label)
win.graph()
plot(Income, Prestige, col=colors[factor(prestige_label)])
legend("topleft", legend = levels(factor(prestige_label)), col = colors, pch=1)
