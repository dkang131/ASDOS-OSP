Variable3 = c(TRUE, FALSE, TRUE)
)
col_class(frame)
frame[["Variable1"]]
names(frame)
frame <- data.frame(
x1 = c(1, 2, 3),
x2 = c("a", "b", "c"),
x3 = c(TRUE, FALSE, TRUE)
)
col_class(frame)
frame <- data.frame(
x1 = c(1, 2, 3),
x2 = c("a", "b", "c"),
x3 = c(TRUE, FALSE, TRUE)
x4 = c("yes", "No")
col_class(frame)
frame <- data.frame(
x1 = c(1, 2, 3),
x2 = c("a", "b", "c"),
x3 = c(TRUE, FALSE, TRUE),
x4 = c("yes", "No")
)
col_class(frame)
frame <- data.frame(
x1 = c(1, 2, 3),
x2 = c("a", "b", "c"),
x3 = c(TRUE, FALSE, TRUE),
x4 = c("yes", "No", "yes no")
)
col_class(frame)
# Number 10
vec_count <- function(a,x){
count = 0
for(i in length(x)){
if(a == x[i]){
count = count + 1
}
}
}
xx = c(1,1,2,3,3,3,4,4,4,4,5)
vec_count(1,xx)
return(count)
# Number 10
vec_count <- function(a,x){
count = 0
for(i in length(x)){
if(a == x[i]){
count = count + 1
}
}
return(count)
}
xx = c(1,1,2,3,3,3,4,4,4,4,5)
vec_count(1,xx)
vec_count(3,xx)
length(xx)
# Number 10
vec_count <- function(a,x){
count = 0
for(i in length(x)){
if(a == x[i]){
count = count + 1
}else{
count = 0
}
}
return(count)
}
xx = c(1,1,2,3,3,3,4,4,4,4,5)
vec_count(3,xx)
# Number 10
vec_count <- function(a,x){
count = matrix(0, ncol = 1)
for(i in length(x)){
if(a == x[i]){
count = count + 1
}else{
count = 0
}
return(count)
}
}
xx = c(1,1,2,3,3,3,4,4,4,4,5)
vec_count(3,xx)
# Number 10
vec_count <- function(a,x){
count = 0
for(i in length(x)){
if(a == x[i]){
count = count + 1
}else{
count = 0
}
return(count)
}
}
xx = c(1,1,2,3,3,3,4,4,4,4,5)
vec_count(3,xx)
# Number 10
vec_count <- function(a,x){
count = 0
for(i in 1:length(x)){
if(a == x[i]){
count = count + 1
}else{
count = 0
}
}
return(count)
}
xx = c(1,1,2,3,3,3,4,4,4,4,5)
vec_count(3,xx)
# Number 10
vec_count <- function(a,x){
count = 0
for(i in 1:length(x)){
if(a == x[i]){
count = count + 1
}
}
return(count)
}
xx = c(1,1,2,3,3,3,4,4,4,4,5)
vec_count(3,xx)
vec_count(2,xx)
vec_count(1,xx)
vec_count(4,xx)
# Number 10
vec_count <- function(a,x){
count = 0
for(i in length(x)){
if(a == x[i]){
count = count + 1
}
}
return(count)
}
xx = c(1,1,2,3,3,3,4,4,4,4,5)
vec_count(4,xx)
# Number 10
vec_count <- function(a,x){
count = 0
for(i in 1:length(x)){
if(a == x[i]){
count = count + 1
}
}
return(count)
}
xx = c(1,1,2,3,3,3,4,4,4,4,5)
vec_count(4,xx)
vec <- c(1, 2, 2, 3, 4, 4, 4)
# remove duplicates from vec
print(unique(vec))
which(diff(vec))
which(diff(vec))==0
dif(vec)
diff(vec)
which(diff(vec)==0)
vec[-which(diff(vec)==0)]
remove_duplicates <- function(input){
input = input[-which(diff(input)==0)]
}
remove_duplicates(xx)
remove_duplicates <- function(input){
input = input[-which(diff(input)==0)]
return(input)
}
remove_duplicates(xx)
# Number 9
vec <- c(1, 2, 2, 3, 4, 4, 4)
print(unique(vec))
remove_duplicates <- function(input){
input = input[-which(diff(input)==0)]
return(input)
}
remove_duplicates(vec)
# Number 11
statdes <- function(input, print_med){
mean = mean(input)
std = sd(input)
if(print_med = T){
# Number 11
statdes <- function(input, print_med){
mean = mean(input)
std = sd(input)
if(print_med == TRUE){
med = median(input)
return(med, mean, std)
}else{
return(med, mean)
}
}
xy = c(1,2,3,4,5)
statdes(xy, T)
# Number 11
statdes <- function(input, print_med){
mean = mean(input)
std = sd(input)
if(print_med == TRUE){
med = median(input)
list(median = med, mean = mean, standard_deviation = std)
}else{
list(mean = mean, standard_deviation = std)
}
}
xy = c(1,2,3,4,5)
statdes(xy, T)
sd(xy)
statdes(xy)
statdes(xy, F)
1 // 2
1 / 2
%
1 % 2
1 %% 2
# Number 12
divisors <- function(a){
div = c(1:9)
count = 0
for(i in 1:length(div)){
if(a %% div[i] == 0){
count = count + 1
}
div = div[-which(a %% div[i] == 0)]
}
return(count)
return(div)
}
divisors(6)
seq(int-1)
seq(42)
6 %% 2
# Number 12
divisors <- function(a){
div = c(1:a)
count = 0
for(i in 1:length(div)){
if(a %% div[i] == 0){
count = count + 1
}
}
return(list(divisors = div[a %% div == 0], count = count))
}
divisors(6)
div = c(1:6)
div[6 %% div == 0]
### No.13
##########
df = iris
refill_na = function(df, value) {
df = sapply(df, function(df_value) replace(df_value, df_value==value, NA))
df = as.data.frame(df)
return(df)
}
# Check the dataframe
df = refill_na(df, 5.1)
df
### No.13
##########
df = iris
df
c = c(1:5)
c
replace(c, 2, 6)
c = matrix(1:9)
c
c = matrix(1:9, 3, 3)
c
replace(c, c(1,2), 3)
# Number 13
fill_na <- function(input, value){
for(i in 1:nrow(input)){
for(j in 1:ncol(input)){
if(value == input[i,j]){
input[i,j] = replace(input, c(i,j), NA)
}
}
}
return(input)
}
df = data.frame(
x1 = c(1,2,3,4,5)
x2 = c("one", "two", "three", "four", "five")
df = data.frame(
x1 = c(1,2,3,4,5),
x2 = c("one", "two", "three", "four", "five")
)
df
fill_na(df, 3)
# Number 13
fill_na <- function(input, value){
for(i in 1:nrow(input)){
for(j in 1:ncol(input)){
if(value == input[i,j]){
input[i,j] = NA
}
}
}
return(input)
}
fill_na(df, 3)
fill_na(df, "one")
fill_na(df, c("one", 1))
# Number 13
fill_na <- function(input, value){
for(i in 1:nrow(input)){
for(j in 1:ncol(input)){
if(input[i,j] %in% value){
input[i,j] = NA
}
}
}
return(input)
}
fill_na(df, c("one", 1))
fill_na(df, 1)
fill_na(df, c(2, "five"))
frame <- data.frame(
x1 = c(1:5),
x2 = c(6,7,NA,8,9),
x3 = c("yes", NA, "no", "yes", NA)
)
frame
del_na <- function(df){
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
if(is.na(df[i,j]) == TRUE){
df = df[-i,]
}
}
}
return(df)
}
del_na(frame)
??complete.cases()
x <- rnorm(100, 0, 2)
y <- array(0, 100)
for(i in 1:length(x)){
if(x[i] >= 0){
y[i+1] = y[i] + x[i]
}else if(x[i] <= -1){
y[i+1] = y[i] - x[i]
}else{
y[i+1] = y[i] - 2*x[i]
}
}
y
find_y <- function(input){
y <- array(0, 100)
for(i in 1:length(x)){
if(x[i] >= 0){
y[i+1] = y[i] + x[i]
}else if(x[i] <= -1){
y[i+1] = y[i] - x[i]
}else{
y[i+1] = y[i] - 2*x[i]
}
}
y
}
find_y(x)
# Number 1
x <- rt(100, df = 2)
find_y <- function(input){
y <- array(0, 100)
for(i in 1:length(x)){
if(x[i] >= 0){
y[i+1] = y[i] + x[i]
}else if(x[i] <= -1){
y[i+1] = y[i] - x[i]
}else{
y[i+1] = y[i] - 2*x[i]
}
}
y
}
find_y(x)
??tapply()
# Number 2
data <- iris
attach(data)
data
tapply(Sepal.Length, Species, max)
tapply(Sepal.Length, Species, min)
# Number 4
#install.packages('tcltk')
library(tcltk)
tkmessageBox(message="Have you finished all the exercises?",
icon="question", type="yesno", default="yes")
x = 1
y = 40
for(i in 1:10){
x = x+3
y = y-2
}
x
y
# Number 9
vec <- c(1, 2, 2, 3, 4, 4, 4, 2)
print(unique(vec))
remove_duplicates <- function(input){
input = input[-which(diff(input)==0)]
return(input)
}
remove_duplicates(vec)
rep(c(1:10),2)
rep(c(1:10), each = 2)
# Number 7
vec_check <- function(a,x){
for(i in length(x)){
if(a == x[i]){
print("TRUE")
}else{
print("FALSE")
}
}
}
vec = c(1,2,3,4,5)
vec_check(6,vec)
vec_check(2,vec)
vec_check(2,vec)
# Number 7
vec_check <- function(a,x){
for(i in 1:length(x)){
if(a == x[i]){
print("TRUE")
}else{
print("FALSE")
}
}
}
vec = c(1,2,3,4,5)
vec_check(2,vec)
# Number 7
vec_check <- function(a,x){
for(i in 1:length(x)){
if(a %in% x[i]){
return("TRUE")
}else{
return("FALSE")
}
}
}
vec = c(1,2,3,4,5)
vec_check(2,vec)
vec_check(4,vec)
# Number 7
vec_check <- function(a,x){
for(i in 1:length(x)){
if(a %in% x[i]){
return("TRUE")
}else{
return("FALSE")
}
}
}
vec = c(1,2,3,4,5)
vec_check(4,vec)
vec_check(1,vec)
frame <- data.frame(
x1 = c(1, 2, 3),
x2 = c("a", "b", "c"),
x3 = c(TRUE, FALSE, TRUE),
x4 = c("yes", "No", "yes no")
)
names(frame)
frame[["x1"]]
# Number 8
col_class <- function(df){
for(col_name in names(df)){
col_class <- class(df[[col_name]])
print(paste(col_name, "is", col_class))
}
}
frame <- data.frame(
x1 = c(1, 2, 3),
x2 = c("a", "b", "c"),
x3 = c(TRUE, FALSE, TRUE),
x4 = c("yes", "No", "yes no")
)
col_class(frame)
# Number 9
vec <- c(1, 2, 2, 3, 4, 4, 4)
print(unique(vec))
remove_duplicates <- function(input){
input = input[-which(diff(input)==0)]
return(input)
}
remove_duplicates(vec)
# Number 9
vec <- c(1, 2, 2, 3, 4, 4, 4, 2)
remove_duplicates <- function(input){
input = input[-which(diff(input)==0)]
return(input)
}
remove_duplicates(vec)
# Number 10
vec_count <- function(a,x){
count = 0
for(i in 1:length(x)){
if(a == x[i]){
count = count + 1
}
}
return(count)
}
xx = c(1,1,2,3,3,3,4,4,4,4,5)
vec_count(4,xx)
vec_count(1,xx)
vec_count(6,xx)
