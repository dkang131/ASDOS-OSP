subset(Land, unemployment==max_y)
subset(Land, index==max_x, unemployment==max_y)
subset(Land, index==max_x & unemployment==max_y)
min_x = min(index)
min_y = min(unemployment)
subset(Land, index==min_x)
subset(Land, unemployment==min_y)
# No.1
minx = min(index); minx
miny = min(unemploy); miny
subset(countries,index==minx)
subset(countries,unemploy==miny)
min_x = min(index)
min_y = min(unemployment)
subset(Land, index==min_x)
subset(Land, unemployment==min_y)
subset(Land, unemployment==min_y)
df = read.csv('exercise2.csv', header = T, sep=";");df
attach(df)
# 1
max_x = max(index)
max_y = max(unemployment)
subset(Land, index==max_x)
subset(Land, unemployment==max_y)
min_x = min(index)
min_y = min(unemployment)
subset(Land, index==min_x)
subset(Land, unemployment==min_y)
View(df)
df = read.csv('exercise2.csv', header = T, sep=";");df
attach(df)
# 1
max_x = max(index)
max_y = max(unemployment)
subset(Land, index==max_x)
subset(Land, unemployment==max_y)
min_x = min(index)
min_y = min(unemployment)
subset(Land, index==min_x)
subset(Land, unemployment==min_y)
# 2
range_x = max_x - min_x
range_y = max_y - min_y
# 3
quant_x = quantile(index, c(0.25,0.75))
quant_y = quantile(unemployment, c(0.25,0.75))
# 4
med_x = median(index)
med.x = quantile(index, 0.5)
med_y = median(unemployment)
med.y = quantile(unemployment, 0.5)
# 3
quant_x = quantile(index, c(0.25,0.75));quant_x
quant_y = quantile(unemployment, c(0.25,0.75));quant_y
# 2
range_x = max_x - min_x;range_x
range_y = max_y - min_y;range_y
quant_x[1]
quant_x[2]
# 5
qdiff_x = quant_x[2]-quant_x[1];qdiff_x
qdiff_y = quant_y[2]-quant_y[1];qdiff_y
quant_y
# 6
mean_x = mean(index);mean_x
mean.x = sum(index)/n
mean.x = sum(index)/length(index)
mean.x = sum(index)/length(index);mean.x
mean_y = mean(index);mean_y
mean_y = mean(unemployment);mean_y
mean.y = sum(unemployment)/length(unemployment)
# 7
mad_x = mean_x - med_x;mad_x
mad_y = mean_y - med_y;mad_y
x = c(2.8, 1.2, 2.1, 1.6, 1.5, 4.6, 3.6, 2.1, 6.5, 4.6, 3.0, 1.3, 4.2)
y = c(9.4, 10.4, 10.8, 10.5, 18.4, 11.1, 2.6, 8.8, 5.0, 21.5, 6.7, 2.5, 5.6)
countries = c("Belgium", "Denmark", "France", "GB", "Ireland", "Italy", "Luxembourg", "Holland", "Portugal", "Spain", "USA", "Japan", "Deutschland")
myframe = data.frame(index = x, unemp = y)
rownames(myframe) = countries
myframe1=data.frame(countries,index=x,unemploy=y)
n = dim(myframe)[1]
attach(myframe); attach(myframe1)
# No.7
madx = mad(index, constant = 1); madx # alternative
median(abs(index - medx)); # constant is the scale vector
# 7
mad_x = median(abs(index)- med_x);mad_x
median(abs(index - medx)); # constant is the scale vector
medx = median(index) # alternative quantile(index, 0.5)
medx
median(abs(index - medx)); # constant is the scale vector
# 7
mad_x = median(abs(index- med_x));mad_x
mad_y = median(abs(unemployment - med_y));mad_y
mad(unemployment, constant = 1)
# 8
var_x = var(index)
var_y = var(unemploym)
var_y = var(unemployment)
# No.8
varx = var(index) # alternative sum((index - meanx)^2) / (n-1)
varx
var.x = sum(index - mean_x)^2 / (length(index) - 1)
var.x = sum((index - mean_x)^2) / (length(index) - 1)
var.y = sum((unemployment - mean_y)^2) / (length(unemployment) - 1)
# 9
std_x = sqrt(var_x)
std_y = sqrt(var_y)
std.x = sd(indx)
std.x = sd(index)
std.y = sd(unemployment)
# 11
cov_xy = cov(index, unemployment);cov_xy
cov(index,index)
# No.11
covxy = cov(myframe) # cov(index, unemp); (1/(n-1)) * sum(index * unemp) - n/(n-1) * mean(index) * mean(unemp)
covxy
View(myframe)
dframe = data.frame(index, unemployment);dframe
cov.xy = cov(dframe)
cov.xy = cov(dframe);cov.xy
cov_xx = cov(index, index)
xy_cov = (1/(length(index) - 1)) * sum(index*unemployment) - ((length(index)/(length(index) - 1)) * (mean_x*mean_y))
xy_cov
# 12
cor = cor(index,unemployment)
cor
cor_xy = cov_xy / sqrt(cov_xx * cov_yy); cor_xy
cov_yy = cov(unemployment, unemployment)
cor_xy = cov_xy / sqrt(cov_xx * cov_yy); cor_xy
cor(index,index)
# 13
rank_x = rank(index);rank_x
rank_y = rank(unemployment);rank_y
# 14
cor_rank = cor(rank_x, rank_y);cor_rank
# No.14
cor(rank(index), rank(unemp)) # alternative cor(index, unemp, method = "spearman")
cor(rank_x,rank_y, method="spearman")
r_rank = sum((rank_x-mean(rank_x))*(rank_y-mean(rank_y))) /
sqrt(sum((rank_x-mean(rank_x))^2) * sum((rank_y-mean(rank_y))^2));r_rank
# 15
ci_x = c(mean_x - (qnorm(1-alpha/2)*std_x)/sqrt(length(index)),
mean_x + (qnorm(1-alpha/2)*std_x)/sqrt(length(index)))
# 15
alpha = 0.05
ci_x = c(mean_x - (qnorm(1-alpha/2)*std_x)/sqrt(length(index)),
mean_x + (qnorm(1-alpha/2)*std_x)/sqrt(length(index)))
ci_x
alpha = 0.05
KI.n = c(mean(index) - qnorm(1-alpha/2) * sd(index) / sqrt(n), mean(index) + qnorm(1-alpha/2) * sd(index) / sqrt(n))
KI.n
ci_y = c(mean_y - (qnorm(1-alpha/2)*std_y)/sqrt(length(unemployment)),
mean_y + (qnorm(1-alpha/2)*std_y)/sqrt(length(unemployment)))
ci_y
# 16
t.test(index, alternative = "g", mu = 3)
t_x = (mean_x-3)/std_x * sqrt(length(index));t_x
pt(t_x, df = length(index) - 1)
pt(t_x, df = length(index) - 1, lower.tail = F)
critval=qt(0.95,n-1); critval #abs(T)<critval: H_0 can not be rejected
pt(critval)
pt(critval,n-1)
ci_t = c(mean_x - 1/sqrt(length(index))* qt(1-alpha, length(index)-1), inf)
ci_t = c(mean_x - 1/sqrt(length(index))* qt(1-alpha, length(index)-1), Inf)
ci_t
KI = c((mean(index)) - qt(1-alpha, df = (n-1)) * sd(index) / sqrt(n), Inf)
KI
ci_t = c(mean_x - 1/sqrt(length(index))* qt(1-alpha, length(index)-1) * std_x, Inf)
ci_t
# 17
t.text(index, unemployment, mu = 0, alternative = "t")
# 17
t.test(index, unemployment, mu = 0, alternative = "t")
# 17
t.test(index, unemployment, mu = 0, alternative = "t", var.equal = T)
t_xy = (mean_x-mean_y) / sqrt((length(index)+length(unemployment))/(length(index)*length(unemployment))) *
(((length(index)-1)*var_x + (length(unemployment)-1)*var_y) / (length(index)+length(unemployment)+2))
t_xy
t_xy = (mean_x-mean_y) / (sqrt((length(index)+length(unemployment))/(length(index)*length(unemployment))) *
(((length(index)-1)*var_x + (length(unemployment)-1)*var_y) / (length(index)+length(unemployment)+2)))
t_xy = (mean_x-mean_y) / (sqrt((length(index)+length(unemployment))/(length(index)*length(unemployment))) *
(((length(index)-1)*var_x + (length(unemployment)-1)*var_y) / (length(index)+length(unemployment)+2)))
t_xy
T.twosample = (mean(index) - mean(unemp)) / sqrt((n+n)/(n*n) * ((n-1)*var(index) + (n-1)*var(unemp))/(n+n-2))
T.twosample
t_xy = (mean_x-mean_y) / (sqrt((length(index)+length(unemployment))/(length(index)*length(unemployment)))) *
(((length(index)-1)*var_x + (length(unemployment)-1)*var_y) / (length(index)+length(unemployment)+2))
t_xy
rm(t_xy)
t_xy = (mean_x - mean_y) / (sqrt((length(index) + length(unemployment))/(length(index) * length(unemployment))) *
((length(index)-1)*std_x + (length(unemployment)-1)*std_y) / (length(index)+length(unemployment)+2))
t_xy
t_xy = (mean_x - mean_y) / (sqrt((length(index) + length(unemployment))/(length(index) * length(unemployment))) *
(((length(index)-1)*std_x + (length(unemployment)-1)*std_y) / (length(index)+length(unemployment)+2)))
t_xy
t_xy = (mean_x - mean_y) / (sqrt((length(index) + length(unemployment))/(length(index) * length(unemployment))) *
(((length(index)-1)*var_x + (length(unemployment)-1)*var_y) / (length(index)+length(unemployment)+2)))
t_xy
((length(index)-1)*var_x + (length(unemployment)-1)*var_y) / (length(index)+length(unemployment)+2))
t_xy = (mean_x - mean_y) / (sqrt((length(index) + length(unemployment))/(length(index) * length(unemployment)) *
((length(index)-1)*var_x + (length(unemployment)-1)*var_y) / (length(index)+length(unemployment)+2)))
t_xy
# 17
t.test(index, unemployment, mu = 0, alternative = "t", var.equal = T)
t_xy = (mean_x - mean_y) / sqrt((length(index) + length(unemployment))/(length(index) * length(unemployment)) *
((length(index)-1)*var_x + (length(unemployment)-1)*var_y) / (length(index)+length(unemployment)+2))
t_xy
t_xy = (mean_x - mean_y) / sqrt((length(index)+length(unemployment))/(length(index)*length(unemployment))*
((length(index)-1)*var_x+(length(unemployment)-1)*var_y)/length(index)+length(unemployment)+2)
t_xy
t_xy = (mean_x - mean_y) / sqrt((length(index)+length(unemployment))/(length(index)*length(unemployment))*
((length(index)-1)*var_x+(length(unemployment)-1)*var_y)/(length(index)+length(unemployment)+2))
t_xy
t_xy = (mean_x - mean_y) / sqrt((length(index)+length(unemployment))/(length(index)*length(unemployment))*
((length(index)-1)*var_x+(length(unemployment)-1)*var_y)/(length(index)+length(unemployment)-2))
t_xy
pt(t_xy, df = length(index)+length(unemployment)-2, lower.tail = F)
# 17
t.test(index, unemployment, mu = 0, alternative = "t", var.equal = T)
pt(t_xy, df = length(index)+length(unemployment)-2)
2*pt(t_xy, df = length(index)+length(unemployment)-2)
# 16
t.test(index, alternative = "g", mu = 3)
-qt(1-alpha/2, df = length(index)+length(unemployment)-2) <= t_xy <= qt(1-alpha/2, df = length(index)+length(unemployment)-2)
-qt(1-alpha/2, df = length(index)+length(unemployment)-2) <= t_xy
t_xy <= qt(1-alpha/2, df = length(index)+length(unemployment)-2)
-qt(1-alpha/2, df = length(index)+length(unemployment)-2)
qt(1-alpha/2, df = length(index)+length(unemployment)-2)
t_xy = (mean_x - mean_y) / sqrt((length(index)+length(unemployment))/(length(index)*length(unemployment))*
((length(index)-1)*var_x+(length(unemployment)-1)*var_y)/(length(index)+length(unemployment)-2))
t_xy
# 17
t.test(index, unemployment, mu = 0, alternative = "t", var.equal = T)
and(-qt(1-alpha/2, df = length(index)+length(unemployment)-2) <= t_xy,
t_xy <= qt(1-alpha/2, df = length(index)+length(unemployment)-2))
else{
else(){
if(-qt(1-alpha/2, df = length(index)+length(unemployment)-2) <= t_xy && t_xy <= qt(1-alpha/2, df = length(index)+length(unemployment)-2)){
print("Gagal Tolak H0")
}
else(){
if(-qt(1-alpha/2, df = length(index)+length(unemployment)-2) <= t_xy && t_xy <= qt(1-alpha/2, df = length(index)+length(unemployment)-2)){
print("Gagal Tolak H0")
}
else{
if(-qt(1-alpha/2, df = length(index)+length(unemployment)-2) <= t_xy && t_xy <= qt(1-alpha/2, df = length(index)+length(unemployment)-2)){
print("Gagal Tolak H0")
}
else
print("Tolak H0")
if(-qt(1-alpha/2, df = length(index)+length(unemployment)-2) <= t_xy && t_xy <= qt(1-alpha/2, df = length(index)+length(unemployment)-2)){
print("Gagal Tolak H0")
}else{
print("Tolak H0")
}
# 18
ftest = var_x / var_y
pf(ftest, df1 = length(index), df2 = length(unemployment))
# 18
ftest = var_x / var_y
# 18
var.test(index, unemployment)
ftest
if(-qt(alpha/2, df = length(index)+length(unemployment)-2) <= t_xy && t_xy <= qt(alpha/2, df = length(index)+length(unemployment)-2)){
print("Gagal Tolak H0")
}else{
print("Tolak H0")
}
-qt(alpha/2, df = length(index)+length(unemployment)-2)
qt(alpha/2, df = length(index)+length(unemployment)-2)
if(t_xy <= -qt(alpha/2, df = length(index)+length(unemployment)-2) && t_xy >= qt(alpha/2, df = length(index)+length(unemployment)-2)){
print("Tolak H0")
}else{
print("Gagal Tolak H0")
}
if(t_xy <= -qt(alpha/2, df = length(index)+length(unemployment)-2) || t_xy >= qt(alpha/2, df = length(index)+length(unemployment)-2)){
print("Tolak H0")
}else{
print("Gagal Tolak H0")
}
# daerah penolakan
c(-qt(1-alpha/2, df = length(index)+length(unemployment)-2), qt(1-alpha/2, df = length(index)+length(unemployment)-2))
# daerah penolakan
c(-qf(1-alpha/2, df1 = length(index)-1, df2 = length(unemployment)-1), qf(1-alpha/2, df1 = length(index)-1, df2 = length(unemployment)-1))
ftest
pf(ftest, df1 = length(index), df2 = length(unemployment))
# 18
var.test(index, unemployment)
2*pf(ftest, df1 = length(index), df2 = length(unemployment))
pf(ftest, df1 = length(index), df2 = length(unemployment))
pf(ftest, df1 = length(index), df2 = length(unemployment), lower.tail = F)
pf(ftest, df1 = length(index), df2 = length(unemployment))*2
pf(ftest, df1 = length(index), df2 = length(unemployment))
# daerah penolakan
c(-qf(1-alpha/2, df1 = length(index)-1, df2 = length(unemployment)-1), qf(1-alpha/2, df1 = length(index)-1, df2 = length(unemployment)-1))
# daerah penolakan
c(qf(1-alpha/2, df1 = length(index)-1, df2 = length(unemployment)-1), qf(1-alpha/2, df1 = length(index)-1, df2 = length(unemployment)-1))
# daerah penolakan
c(qf(1-alpha/2, df1 = length(index)-1, df2 = length(unemployment)-1), qf(alpha/2, df1 = length(index)-1, df2 = length(unemployment)-1))
ftest
if(ftest <= qf(1-alpha/2, df1 = length(index)-1, df2 = length(unemployment)-1) || ftest >= qf(alpha/2, df1 = length(index)-1, df2 = length(unemployment)-1)){
print("Tolak H0")
}else{
print("Gagal Tolak H0")
}
df = read.csv('exercise2.csv', header = T, sep=";");df
attach(df)
# 10
boxplot(index)
boxplot(unemployment)
# 10
par(mfrow=c(1,2))
boxplot(index)
boxplot(unemployment)
boxplot(index, main="Boxplot Index")
boxplot(unemployment, main="Boxplot Unemployment")
boxplot(index, main="Boxplot Index", xlab = "index")
boxplot(unemployment, main="Boxplot Unemployment", xlab = "unemployment")
hist(index, main = "Histogram Index")
hist(unemployment, main = "Histogram Unemployment")
density_x = density(index)
density_y = density(unemployment)
plot(density_x, main = "Kernel Density Estimator Index")
plot(density_y, main = "Kernel Density Estimator Unemployment")
ecdf_x = ecdf(index)
ecdf_y = ecdf(unemployment)
plot(ecdf_x, main = "Empirical Distribution Function Index")
plot(ecdf_y, main = "Empirical Distribution Function Unemployment")
plot(ecdf_x, xlab = "index")
plot(ecdf_y, xlab = "unemployment")
?plot()
??plot()
help(plot())
help(plot)# 11
plot(ecdf_x, xlab = "index", main = "Empirical Distribution Function Index")
plot(ecdf_y, xlab = "unemployment", main = "Empirical Distribution Function Unemployment")
plot(ecdf_x, xlab = "index", main = "EDF Index")
plot(ecdf_y, xlab = "unemployment", main = "EDF Unemployment")
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("C:/Users/darre/Desktop/ASDOS OSP/W1")
#write data
library('datasets')
data('Orange')
Orange
# getwd()
# setwd("C:/Users/darre/Desktop/ASDOS OSP/W1")
write.table(Orange, 'orange1.txt')
write.table(Orange, 'orange2.txt', col.names=F, row.names = F)
write.table(Orange, "orange3.txt", sep = "\t")
write.csv2(Orange, "orange4.csv")
#read txt
data = read.table("orange1.txt", header = T)
View(data)
# read csv
data_csv=read.csv("orange4.csv", sep=";", header=TRUE)
View(data_csv)
a=c(10,20,15,43,76,41)
a
b=factor(c("m","f","m","f","m","f"))
b
c=c(2,5,8,3,6,1)
c
myframe=data.frame(a,b,c)
myframe
colnames(myframe) = c("Age","Sex","Siblings")
myframe
myframe[,1]
myframe["Age"]
myframe$Age
myframe
myframe[3,3]=2
myframe
myframe[,-2]
df = read.csv('exercise2.csv', header = T, sep=";");df
setwd("C:/Users/darre/Desktop/ASDOS OSP/W2")
df = read.csv('exercise2.csv', header = T, sep=";");df
attach(df)
max_x = max(index)
max_y = max(unemployment)
subset(Land, index==max_x)
subset(Land, unemployment==max_y)
View(df)
min_x = min(index)
min_y = min(unemployment)
subset(Land, index==min_x)
subset(Land, unemployment==min_y)
range_x = max_x - min_x;range_x
range_y = max_y - min_y;range_y
quant_x = quantile(index, c(0.25,0.75));quant_x
quant_y = quantile(unemployment, c(0.25,0.75));quant_y
med_x = median(index)
med.x = quantile(index, 0.5)
med_y = median(unemployment)
med.y = quantile(unemployment, 0.5)
c(med_x, med.x, med.y, med_y)
quant_x
qdiff_x = quant_x[2]-quant_x[1];qdiff_x
qdiff_y = quant_y[2]-quant_y[1];qdiff_y
# 6
mean_x = mean(index);mean_x
mean.x = sum(index)/length(index);mean.x
mean_y = mean(unemployment);mean_y
mean.y = sum(unemployment)/length(unemployment)
# 7
mad_x = median(abs(index- med_x));mad_x
mad_y = median(abs(unemployment - med_y));mad_y
mad(unemployment, constant = 1)
mad(unemployment)
mad(unemployment, constant = 1)
# 8
var_x = var(index)
var.x = sum((index - mean_x)^2) / (length(index) - 1)
c(var.x, var_x)
var_y = var(unemployment)
var.y = sum((unemployment - mean_y)^2) / (length(unemployment) - 1)
c(var_y, var.y)
std_x = sqrt(var_x)
std.x = sd(index)
std_y = sqrt(var_y)
std.y = sd(unemployment)
c(std_x, std.x)
c(std_y, std.y)
setwd("C:/Users/darre/Desktop/ASDOS OSP/W2")
df = read.csv('exercise2.csv', header = T, sep=";");df
attach(df)
# 1
max_x = max(index)
max_y = max(unemployment)
subset(Land, index==max_x)
subset(Land, unemployment==max_y)
min_x = min(index)
min_y = min(unemployment)
subset(Land, index==min_x)
subset(Land, unemployment==min_y)
# 2
range_x = max_x - min_x;range_x
range_y = max_y - min_y;range_y
# 3
quant_x = quantile(index, c(0.25,0.75));quant_x
quant_y = quantile(unemployment, c(0.25,0.75));quant_y
# 4
med_x = median(index)
med.x = quantile(index, 0.5)
med_y = median(unemployment)
med.y = quantile(unemployment, 0.5)
# 5
qdiff_x = quant_x[2]-quant_x[1];qdiff_x
qdiff_y = quant_y[2]-quant_y[1];qdiff_y
# 6
mean_x = mean(index);mean_x
mean.x = sum(index)/length(index);mean.x
mean_y = mean(unemployment);mean_y
mean.y = sum(unemployment)/length(unemployment)
# 7
mad_x = median(abs(index- med_x));mad_x
mad_y = median(abs(unemployment - med_y));mad_y
mad(unemployment, constant = 1)
# 8
var_x = var(index)
var.x = sum((index - mean_x)^2) / (length(index) - 1)
var_y = var(unemployment)
var.y = sum((unemployment - mean_y)^2) / (length(unemployment) - 1)
# 9
std_x = sqrt(var_x)
std.x = sd(index)
std_y = sqrt(var_y)
std.y = sd(unemployment)
# 10
par(mfrow=c(1,2))
boxplot(index, main="Boxplot Index", xlab = "index")
alpha = 0.05
ci_x = c(mean_x - (qnorm(1-alpha/2)*std_x)/sqrt(length(index)),
mean_x + (qnorm(1-alpha/2)*std_x)/sqrt(length(index)))
ci_y = c(mean_y - (qnorm(1-alpha/2)*std_y)/sqrt(length(unemployment)),
mean_y + (qnorm(1-alpha/2)*std_y)/sqrt(length(unemployment)))
ci_x
ci_y
x = c(2.8, 1.2, 2.1, 1.6, 1.5, 4.6, 3.6, 2.1, 6.5, 4.6, 3.0, 1.3, 4.2)
y = c(9.4, 10.4, 10.8, 10.5, 18.4, 11.1, 2.6, 8.8, 5.0, 21.5, 6.7, 2.5, 5.6)
countries = c("Belgium", "Denmark", "France", "GB", "Ireland", "Italy", "Luxembourg", "Holland", "Portugal", "Spain", "USA", "Japan", "Deutschland")
myframe = data.frame(index = x, unemp = y)
rownames(myframe) = countries
myframe1=data.frame(countries,index=x,unemploy=y)
n = dim(myframe)[1]
attach(myframe); attach(myframe1)
alpha = 0.05
KI.n = c(mean(index) - qnorm(1-alpha/2) * sd(index) / sqrt(n), mean(index) + qnorm(1-alpha/2) * sd(index) / sqrt(n))
KI.n
qnorm(0.025)
qnorm(0.025, lower.tail = T)
qnorm(0.025, lower.tail = F)
ci_y = c(mean_y - (qnorm(1-alpha/2)*std_y)/sqrt(length(unemployment)),
mean_y + (qnorm(1-alpha/2)*std_y)/sqrt(length(unemployment)))
ci_y
mean.y
t_x = (mean_x-3)/std_x * sqrt(length(index));t_x
pt(t_x, df = length(index) - 1, lower.tail = F)
# if pval < alpha -> tolak H0
ci_t = c(mean_x - 1/sqrt(length(index))* qt(1-alpha, length(index)-1) * std_x, Inf)
cit
ci_t
ci_x = c(mean_x - (qnorm(alpha/2)*std_x)/sqrt(length(index)),
mean_x + (qnorm(1-alpha/2)*std_x)/sqrt(length(index)))
ci_x
ci_x = c(mean_x - (qnorm(1-alpha/2)*std_x)/sqrt(length(index)),
mean_x + (qnorm(1-alpha/2)*std_x)/sqrt(length(index)))
ci_x
# 16
t.test(index, alternative = "g", mu = 3)
t_x = (mean_x-3)/std_x * sqrt(length(index));t_x
