b
paste(a,b)
b = 2^(1:8);b
b = 2^(1:6);b
c = seq(1,8,1)^2;c
b = 2^(1:8);b
s = seq(1,19,2)
s
s[4]
s[-4]
s = seq(1,19,2)
s = s[-c(5,8)]
s
b = 2^(1:8)
c = (1:8)^2;c
which(b==c)
(1:8)
b = 2^(1:8)
b
c = (1:8)^2
c
which(b==c)
b[which(b==c)]
c[which(b==c)]
a = seq(1,19,2)
a = a[-c(5,8)]
a
M.c = cbind(b,c)
M.c
dim(M.c)
M.c[7,]
M.r = rbind(a,b)
M.r = rbind(a,b)
M.r
rownames = (a,b)
rownames = (a;b)
rownames = (a:b)
rownames(M.r) = ("a","b")
rownames(M.r) = (c("a","b"))
M.r
colnames(M.r) = (c("S","T","U","V","W","x","Y","Z"))
M.r
letters[1,2]
letters[1:2]
LETTERS[1:2]
typeof(M.c)
str(M.c)
m = matrix(c(1:9),3,)
typeof(m)
str(m)
M.c = matrix(c(b,c),bycol=T)
M.c = matrix(c(b,c),byrow=F)
M.c
M.c = matrix(c(b,c))
M.c
M.c = matrix(c(b,c),byrow=T)
M.c
M.c = matrix(c(b,c),byrow=F)
M.c
M.r = rbind(a,b)
M.r
m = matrix(c(a,b),ncol=len(b))
len(b)
m = matrix(c(a,b),ncol=length(b))
m
M.r[, -5]
M.r[, colnames(M.r) != "W"]
rownames(M.r) = (c("a","b"))
colnames(M.r) = (c("S","T","U","V","W","x","Y","Z"))
rownames(M.r) = (c("a","b"))
colnames(M.r) = (c("S","T","U","V","W","x","Y","Z"))
M.r[, -5]
M.r[, colnames(M.r) != "W"]
M.r > 12
M.r[M.r > 12]
M.r = rbind(a,b)
M.r
x = seq(-3,3,0.5)
y = exp(-x)
y
d = (1:100)
d
e = rep(7,100)
e
D = matrix(c(1:100),10,10)
D
# 12.
D <- matrix(d,10,10);
D
E = matrix(c(1/d),10,10,byrow=T)
E
View(E)
View(E)
E <- matrix(v,10,10,byrow=TRUE);
v <- 1/(1:100);
E <- matrix(v,10,10,byrow=TRUE);
E
# 17.
price = c(2,3,5,3,2,5,7,4,2,5)
returns = diff(log(price))
returns
lp = log(prices)
lp = log(price)
lp
lp-price
price-lp
D+E
D-E
D %*% E
D * E
P = D%*%E
diag(P)
P[row(P)==col(P)]
# 15.
x <- c(-10, 0, 0.1, 10, 1000, 100000)
y1 <- x^5 + x^4 + x^3 + x^2 + x+1
y2 <- 1 + x*(1 + x*( 1+ x*( 1+x*( 1+x ))))
y1
y2
grid <- seq(0,2*pi)
sin.grid <- sin(grid)
cos.grid <- cos(grid)
tan.grid <- tan(grid)
diff.grid <- sin.grid/cos.grid - tan.grid
diff.grid
grid = seq(0, 2*pi, length.out = 20)
sin.g = sin(grid)
cos.g = cos(grid)
tan.g = tan(grid)
diff.sct = sin.g/cos.g - tan.g
diff.sct
diff.grid
tan.grid
sin.grid/cos.grid
prod(D,E)
library(pracma)
dot(D,E)
D %*% E
D
E
dot(D,E)
D * E
length(which(sin.g > 0)) / length(which(sin.g < 0))
length(sin.g[sin.g > 0]) / length(sin.g[sin.g < 0])
sin.9
sin.g
returns = diff(log(price))
return = log(price[-1]/price[-length(price)])
returns
return
price[-1]
price[-length(price)]
# 19. refers to # 16
length(which(sin.g > 0)) / length(which(sin.g < 0))
sin.9
sin.g
D+E
D-E
D %*% E
D * E
View(D%*%E)
View(D*E)
diag(P)
P[row(P)==col(P)]
x <- c(-10, 0, 0.1, 10, 1000, 100000)
y1 <- x^5 + x^4 + x^3 + x^2 + x+1
y2 <- 1 + x*(1 + x*( 1+ x*( 1+x*( 1+x ))))
y1
y2
grid <- seq(0,2*pi)
grid
grid <- seq(0,2*pi, length.out=10)
grid
grid <- seq(0,2*pi, length.out=10)
grid <- seq(0,2*pi, length.out=10);grid
grid <- seq(0,2*pi)
grid <- seq(0,2*pi);grid
grid <- seq(0,2*pi, length.out=10);grid
# grid <- seq(0,2*pi);grid
sin.grid <- sin(grid)
cos.grid <- cos(grid)
tan.grid <- tan(grid)
diff.grid <- sin.grid/cos.grid - tan.grid
diff.grid
tan.grid
sin.grid/cos.grid
price = c(2,3,5,3,2,5,7,4,2,5)
returns = diff(log(price))
return = log(price[-1]/price[-length(price)])
returns
return
ch.points = c(1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6)
which(diff(ch.points) == 1)
diff(ch.points)
B = pascal(3)
B
length(which(sin.grid > 0)) / length(which(sin.grid < 0))
# grid <- seq(0,2*pi);grid
sin.grid <- sin(grid)
sin.grid
A = rbind(
c(-1.00,  3.71,  2.80, 0.01,  1.19),
c( 0.40, -1.81, -1.96, 1.84,  1.74),
c(-4.30,  1.71,  0.68, 0.11,  3.44),
c( 0.03,  3.90,  0.41, 0.02,  1.05),
c( 0.24, -0.01,  2.10, 2.87, -3.57))
det(A)
inv.A = solve(A)
inv.A
inv.A %*% A
B = pascal(3)
B
C = matrix(1:9,nrow = 3, ncol = 3)
C
D = B
B[upper.tri(B, diag = F)] = C[upper.tri(C, diag = F)]
B
C
C[upper.tri(C, diag = F)] = D[upper.tri(D, diag = F)]
C
B[upper.tri(B, diag = T)] = C[upper.tri(C, diag = T)]
B
C[upper.tri(C, diag = T)] = D[upper.tri(D, diag = T)]
C
B[lower.tri(B, diag = F)] = 0
B
B = pascal(3)
B[lower.tri(B, diag = F)] = 0
B
C[lower.tri(C, diag = F)] = 0
C
C = matrix(1:9,nrow = 3, ncol = 3)
C[lower.tri(C, diag = F)] = 0
C
B = pascal(3)
B
C = matrix(1:9,nrow = 3, ncol = 3)
C
y = c(529.0, 530.0, 532.0, 533.1, 533.4, 533.6, 533.7, 534.1, 534.8, 535.3,
535.4, 535.9, 536.1, 536.3, 536.4, 536.6, 537.0, 537.4, 537.5, 538.3,
538.5, 538.6, 539.4, 539.6, 540.4, 540.8, 542.0, 542.8, 543.0, 543.5,
543.8, 543.9, 545.3, 546.2, 548.8, 548.7, 548.9, 549.0, 549.4, 549.9,
550.6, 551.2, 551.4, 551.5, 551.6, 552.8, 552.9,553.2)
mean(y)
factorial <- function(input){
base = 1
res = 0
if(input < 2){
print(base)
}else{
print(input * factorial(input-1))
}
}
factorial(0)
factorial(1)
factorial(3)
factorial <- function(input){
base = 1
if(input < 2){
print(base)
}else{
print(input * factorial(input-1))
}
}
factorial(3)
factorial <- function(input){
base = 1
if(input < 2){
print(base)
}
for(i in 2:input+1){
base = base * i
}
return(base)
}
factorial(0)
factorial(1)
factorial <- function(input){
base = 1
if(input < 2){
print(base)
}else{
for(i in 2:input+1){
base = base * i
}
}
return(base)
}
factorial(0)
factorial(1)
factorial(3)
factorial <- function(input){
base = 1
for(i in 2:input+1){
base = base * i
}
return(base)
}
factorial(0)
factorial(1)
factorial(3)
factorial <- function(input){
if(input <= 1){
return(1)
}else{
return(input * factorial(input-1))
}
}
factorial(0)
factorial(1)
factorial(3)
factorial(4)
prima <- function(input){
if(input <= 1){
print('Not Prime')
}
for(i in 2:int/2){
if(input %% i == 0){
prime <- FALSE
}
}
}
prima(3)
prima(3)
prima <- function(input){
if(input <= 1){
print('Not Prime')
}
for(i in 2:input/2){
if(input %% i == 0){
prime <- FALSE
}
}
}
prima(3)
prima <- function(input){
if(input <= 1){
print('Not Prime')
}
for(i in 2:input/2){
if(input %% i == 0){
return(F)
}
}
}
prima(3)
isprime <- function(input){
if(input <= 1){
return(F)
}
for(i in 2:input/2 + 1){
if(input %% i == 0){
return(F)
}
}
return(T)
}
isprime(3)
isprime(5)
isprime(7)
isprime <- function(input){
if(input <= 1){
return(F)
}
for(i in 2:round(input/2)){
if(input %% i == 0){
return(F)
}
}
return(T)
}
isprime(3)
isprime(7)
isprime(9)
isprime(37)
isprime(5)
isprime(2)
isprime <- function(input){
if(input <= 1){
return(F)
}
for(i in 2:round(input/2) + 1){
if(input %% i == 0){
return(F)
}
}
return(T)
}
isprime(2)
isprime(3)
isprime(5)
isprime(37)
isprime <- function(input){
if(input <= 1){
return(F)
}
for(i in 2:round(input/2)){
if(input %% i == 0){
return(F)
}
}
return(T)
}
isprime(2)
isprime(3)
isprime(5)
isprime(37)
isprime <- function(input){
if(input <= 1){
return(F)
}
if(input == 2){
return(T)
}
for(i in 2:round(input/2)){
if(input %% i == 0){
return(F)
}
}
return(T)
}
isprime(2)
isprime(3)
isprime(5)
isprime(37)
factorial <- function(input){
if(input <= 1){
return(1)
}else{
return(input * factorial(input-1))
}
}
rm(list=ls())
i <- rep(1:12, times = 18)
i
j <- rep(month.abb[1:12], times = 12)
j <- rep(month.abb[1:12], times = 18)
y <- rep(2006:2023, each = 18)
y <- rep(2006:2023, each = 12)
t <- 1:length(i)
data <- data.frame(Index = i, Month = j, Year = y, Time = t)
data <- data.frame(Index = i, Month = j, Year = y, Time = t)
View(data)
set.seed(184)
yt = matrix(0, nrow = 216)
error = rnorm(216, 0, 1)
for(i in 1:216){
yt[i] = 100 + (10*i) + 50 * sin(2*pi*i/12) + error[i]
}
yt
data <- cbind(data, yt)
head(data)
plot(type ="l",data$Time,data$yt)
plot(type ="l",data$Time,data$yt)
plot(type ="l",data$Time,data$yt,lwd = 3, col ="red")
abline(h=data$Year)
abline(v=seq(min((data$yt)):max(data$yt)),by=100)
abline(v=seq(min((data$yt)),max(data$yt)),by=100)
plot(type ="l",data$Time,data$yt,lwd = 3, col ="red")
abline(h=data$Year)
abline(v=seq(min((data$yt)),max(data$yt)),by=100)
plot(type ="l",data$Time,data$yt,lwd = 3, col ="red")
abline(h=data$Year)
abline(v=seq(min((data$yt)),max(data$yt)),by=100)
plot(type ="l",data$Time,data$yt,lwd = 3, col ="red")
abline(h=data$Year)
abline(v=seq(min((data$yt)),max(data$yt),by =100))
win.graph()
where.put = c(1, which(diff(data[,3]) == 1) + 1)
plot(data[,5], type = "l", lwd = 3, lty = 1, pch = 16, col = "red", xlab = "Time",
ylab = "Yt", axes = F, frame = T)
abline(h = seq(100,2500, by=100), lty = 'dotted', lwd=0.5, col="grey")
abline(v = where.put, lty="dotted", lwd=0.5, col = "grey")
where.put = c(1, which(diff(data[,3]) == 1) + 1)
plot(data[,5], type = "l", lwd = 3, lty = 1, pch = 16, col = "red", xlab = "Time",
ylab = "Yt", axes = F, frame = T)
win.graph()
where.put = c(1, which(diff(data[,3]) == 1) + 1)
plot(data[,5], type = "l", lwd = 3, lty = 1, pch = 16, col = "red", xlab = "Time",
ylab = "Yt", axes = F, frame = T)
abline(h = seq(100,2500, by=100), lty = 'dotted', lwd=0.5, col="grey")
abline(v = where.put, lty="dotted", lwd=0.5, col = "grey")
axis(side=2, at=seq(100,2500,by=100), label=seq(100,2500,by=100), lwd=1)
axis(side=1, at=where.put, label=data[,3][where.put], lwd=0.5)
setwd('C:/Users/darre/Desktop/ASDOS OSP/W6')
library(openxlsx)
read.xlsx
read.xlsxO(sabun.xlsx)
read.xlsx(sabun.xlsx)
read.xlsx("sabun.xlsx")
avg = rowMeans(sabun,["Sabun_A", "Sabun_B"])
avg = rowMeans(sabun["Sabun_A", "Sabun_B"])
avg = rowMeans(sabun.xlsx["Sabun_A", "Sabun_B"])
sabun = read.xlsx("sabun.xlsx")
avg = rowMeans(sabun["Sabun_A", "Sabun_B"])
avg = rowMeans(sabun[["Sabun_A", "Sabun_B"]])
df = c(sabun$Sabun_A,sabun$Sabun_B)
avg = sapply(df)
avg = sapply(df, mean)
avg
data2 = data.frame(sabun, avg)
View(data2)
avg = (sabun$Sabun_A + sabun$Sabun_B)
avg = (sabun$Sabun_A + sabun$Sabun_B)/2
data2 = data.frame(sabun, avg)
library(readxl)
sabun <- as.data.frame(read_excel("sabun.xlsx"))
head(sabun)
rataan <- (sabun[,3] + sabun[,4])/2
rataan
sabun <- cbind(sabun, rataan)
head(sabun)
