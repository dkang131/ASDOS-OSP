n <- length(y)
k <- ncol(x) - 1
beta <- solve(t(x) %*% x) %*% t(x) %*% y
y_hat <- x %*% beta
SSR <- sum((y_hat - mean(y))^2)
SST <- sum((y - mean(y))^2)
SSRES <- SST - SSR
MSR <- SSR / k
MSRES <- SSRES / (n - k - 1)
F_hit <- MSR / MSRES
pval <- pf(F_hit, k, n - k - 1, lower.tail = F)
R2 <- SSR / SST
R2adj <- 1 - (1 - R2) * ((n - 1) / (n - k - 1))
Anova_table <- data.frame(
source = c("Regression", "Residual", "Total"),
"SS" = c(SSR, SSRES, SST),
"df" = c(k, n - k - 1, n - 1),
"MSS" = c(MSR, MSRES, NA),
"F" = c(F_hit, NA, NA),
"P-VALUE" = c(pval, NA, NA),
"R2" = c(R2, NA, NA),
"R2 Adjusted" = c(R2adj, NA, NA)
)
return(Anova_table)
}
ANOVA_data <- ANOVA(X,y); ANOVA_data
rm(list=ls())
library(maptools)
library(rgdal)
install.packages("C:/Users/darre/Downloads/rgdal_1.6-7.tar.gz")
install.packages("C:/Users/darre/Downloads/rgdal_1.6-7.tar.gz", repos = NULL, type = 'source')
install.packages("C:/Users/darre/Downloads/rgdal_1.6-7.tar.gz", repos = NULL)
install.packages('sp')
install.packages("C:/Users/darre/Downloads/rgdal_1.6-7.tar.gz")
library(rgdal)
install.packages("C:/Users/darre/Downloads/maptools_1.1-8.tar.gz")
library(maptools)
library(rgdal)
library(maptools)
library(rgdal)
rm(list = all)
print(a)
a = "slumdog"
b = "millionaire"
a
b
paste(a,b)
s = seq(1,19,2)
s
s = s[-c(5,8)]
s
a
b
paste(a,b)
b = 2^(1:8);b
b = 2^(1:6);b
c = seq(1,8,1)^2;c
b = 2^(1:8);b
s = seq(1,19,2)
s
s[4]
s[-4]
s = seq(1,19,2)
s = s[-c(5,8)]
s
b = 2^(1:8)
c = (1:8)^2;c
which(b==c)
(1:8)
b = 2^(1:8)
b
c = (1:8)^2
c
which(b==c)
b[which(b==c)]
c[which(b==c)]
a = seq(1,19,2)
a = a[-c(5,8)]
a
M.c = cbind(b,c)
M.c
dim(M.c)
M.c[7,]
M.r = rbind(a,b)
M.r = rbind(a,b)
M.r
rownames = (a,b)
rownames = (a;b)
rownames = (a:b)
rownames(M.r) = ("a","b")
rownames(M.r) = (c("a","b"))
M.r
colnames(M.r) = (c("S","T","U","V","W","x","Y","Z"))
M.r
letters[1,2]
letters[1:2]
LETTERS[1:2]
typeof(M.c)
str(M.c)
m = matrix(c(1:9),3,)
typeof(m)
str(m)
M.c = matrix(c(b,c),bycol=T)
M.c = matrix(c(b,c),byrow=F)
M.c
M.c = matrix(c(b,c))
M.c
M.c = matrix(c(b,c),byrow=T)
M.c
M.c = matrix(c(b,c),byrow=F)
M.c
M.r = rbind(a,b)
M.r
m = matrix(c(a,b),ncol=len(b))
len(b)
m = matrix(c(a,b),ncol=length(b))
m
M.r[, -5]
M.r[, colnames(M.r) != "W"]
rownames(M.r) = (c("a","b"))
colnames(M.r) = (c("S","T","U","V","W","x","Y","Z"))
rownames(M.r) = (c("a","b"))
colnames(M.r) = (c("S","T","U","V","W","x","Y","Z"))
M.r[, -5]
M.r[, colnames(M.r) != "W"]
M.r > 12
M.r[M.r > 12]
M.r = rbind(a,b)
M.r
x = seq(-3,3,0.5)
y = exp(-x)
y
d = (1:100)
d
e = rep(7,100)
e
D = matrix(c(1:100),10,10)
D
# 12.
D <- matrix(d,10,10);
D
E = matrix(c(1/d),10,10,byrow=T)
E
View(E)
View(E)
E <- matrix(v,10,10,byrow=TRUE);
v <- 1/(1:100);
E <- matrix(v,10,10,byrow=TRUE);
E
# 17.
price = c(2,3,5,3,2,5,7,4,2,5)
returns = diff(log(price))
returns
lp = log(prices)
lp = log(price)
lp
lp-price
price-lp
D+E
D-E
D %*% E
D * E
P = D%*%E
diag(P)
P[row(P)==col(P)]
# 15.
x <- c(-10, 0, 0.1, 10, 1000, 100000)
y1 <- x^5 + x^4 + x^3 + x^2 + x+1
y2 <- 1 + x*(1 + x*( 1+ x*( 1+x*( 1+x ))))
y1
y2
grid <- seq(0,2*pi)
sin.grid <- sin(grid)
cos.grid <- cos(grid)
tan.grid <- tan(grid)
diff.grid <- sin.grid/cos.grid - tan.grid
diff.grid
grid = seq(0, 2*pi, length.out = 20)
sin.g = sin(grid)
cos.g = cos(grid)
tan.g = tan(grid)
diff.sct = sin.g/cos.g - tan.g
diff.sct
diff.grid
tan.grid
sin.grid/cos.grid
prod(D,E)
library(pracma)
dot(D,E)
D %*% E
D
E
dot(D,E)
D * E
length(which(sin.g > 0)) / length(which(sin.g < 0))
length(sin.g[sin.g > 0]) / length(sin.g[sin.g < 0])
sin.9
sin.g
returns = diff(log(price))
return = log(price[-1]/price[-length(price)])
returns
return
price[-1]
price[-length(price)]
# 19. refers to # 16
length(which(sin.g > 0)) / length(which(sin.g < 0))
sin.9
sin.g
D+E
D-E
D %*% E
D * E
View(D%*%E)
View(D*E)
diag(P)
P[row(P)==col(P)]
x <- c(-10, 0, 0.1, 10, 1000, 100000)
y1 <- x^5 + x^4 + x^3 + x^2 + x+1
y2 <- 1 + x*(1 + x*( 1+ x*( 1+x*( 1+x ))))
y1
y2
grid <- seq(0,2*pi)
grid
grid <- seq(0,2*pi, length.out=10)
grid
grid <- seq(0,2*pi, length.out=10)
grid <- seq(0,2*pi, length.out=10);grid
grid <- seq(0,2*pi)
grid <- seq(0,2*pi);grid
grid <- seq(0,2*pi, length.out=10);grid
# grid <- seq(0,2*pi);grid
sin.grid <- sin(grid)
cos.grid <- cos(grid)
tan.grid <- tan(grid)
diff.grid <- sin.grid/cos.grid - tan.grid
diff.grid
tan.grid
sin.grid/cos.grid
price = c(2,3,5,3,2,5,7,4,2,5)
returns = diff(log(price))
return = log(price[-1]/price[-length(price)])
returns
return
ch.points = c(1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6)
which(diff(ch.points) == 1)
diff(ch.points)
B = pascal(3)
B
length(which(sin.grid > 0)) / length(which(sin.grid < 0))
# grid <- seq(0,2*pi);grid
sin.grid <- sin(grid)
sin.grid
A = rbind(
c(-1.00,  3.71,  2.80, 0.01,  1.19),
c( 0.40, -1.81, -1.96, 1.84,  1.74),
c(-4.30,  1.71,  0.68, 0.11,  3.44),
c( 0.03,  3.90,  0.41, 0.02,  1.05),
c( 0.24, -0.01,  2.10, 2.87, -3.57))
det(A)
inv.A = solve(A)
inv.A
inv.A %*% A
B = pascal(3)
B
C = matrix(1:9,nrow = 3, ncol = 3)
C
D = B
B[upper.tri(B, diag = F)] = C[upper.tri(C, diag = F)]
B
C
C[upper.tri(C, diag = F)] = D[upper.tri(D, diag = F)]
C
B[upper.tri(B, diag = T)] = C[upper.tri(C, diag = T)]
B
C[upper.tri(C, diag = T)] = D[upper.tri(D, diag = T)]
C
B[lower.tri(B, diag = F)] = 0
B
B = pascal(3)
B[lower.tri(B, diag = F)] = 0
B
C[lower.tri(C, diag = F)] = 0
C
C = matrix(1:9,nrow = 3, ncol = 3)
C[lower.tri(C, diag = F)] = 0
C
B = pascal(3)
B
C = matrix(1:9,nrow = 3, ncol = 3)
C
y = c(529.0, 530.0, 532.0, 533.1, 533.4, 533.6, 533.7, 534.1, 534.8, 535.3,
535.4, 535.9, 536.1, 536.3, 536.4, 536.6, 537.0, 537.4, 537.5, 538.3,
538.5, 538.6, 539.4, 539.6, 540.4, 540.8, 542.0, 542.8, 543.0, 543.5,
543.8, 543.9, 545.3, 546.2, 548.8, 548.7, 548.9, 549.0, 549.4, 549.9,
550.6, 551.2, 551.4, 551.5, 551.6, 552.8, 552.9,553.2)
mean(y)
setwd('C:/Users/darre/Desktop/ASDOS OSP/W4')
data <- read.table('dax30.txt', sep = "\t", dec=",")
label <- as.numeric(format(as.Date(data[,1], "%d/%m/%Y"), "%Y"))
# put labels where the year changes
where.put = c(1, which(diff(label) == 1) + 1)
where.put
View(label)
plot(data[,2], type = "l", lwd = 2, lty = 1, pch=16, col = "blue3",
frame=T, axes=F, xlab="Datum", ylab="DAX")
win.graph()
plot(data[,2], type = "l", lwd = 2, lty = 1, pch=16, col = "blue3",
frame=T, axes=F, xlab="Datum", ylab="DAX")
abline(h=seq(1000,8000,by=500), lty="dotted", lwd=0.5, col="grey")
abline(v=where.put, lty="dotted", lwd=0.5, col = "grey")
axis(side=2, at=seq(1000,8000,by=500), label=seq(1000,8000,by=500), lwd=1)
axis(side=1, at=where.put, label=label[where.put], lwd=0.5)
??plot()
??plot
win.graph()
plot(data[,2], type = "l", lwd = 2, lty = 1, pch=16, col = "blue3",
frame=T, axes=F, xlab="Datum", ylab="DAX")
abline(h=seq(1000,8000,by=500), lty="dotted", lwd=0.5, col="grey")
abline(v=where.put, lty="dotted", lwd=0.5, col = "grey")
axis(side=2, at=seq(1000,8000,by=500), label=seq(1000,8000,by=500), lwd=1)
axis(side=1, at=where.put, label=label[where.put], lwd=0.5)
#DAX Index to PDF
# pdf() -> save to PDF
# png() -> save to png
pdf("index_dax30.pdf", width = 8, height = 6)
plot(data[,2], type = "l", lwd = 2, lty = 1, pch=16, col = "blue3",
frame=T, axes=F, xlab="Datum", ylab="DAX")
abline(h=seq(1000,8000,by=500), lty="dotted", lwd=0.5, col="grey")
abline(v=where.put, lty="dotted", lwd=0.5, col = "grey")
axis(side=2, at=seq(1000,8000,by=500), label=seq(1000,8000,by=500), lwd=1)
axis(side=1, at=where.put, label=label[where.put], lwd=0.5)
dev.off()
# DAX Index to png
png("index_dax30.png", width = 400, height = 300)
plot(data[,2], type = "l", lwd = 2, lty = 1, pch=16, col = "blue3",
frame=T, axes=F, xlab="Datum", ylab="DAX")
abline(h=seq(1000,8000,by=500), lty="dotted", lwd=0.5, col="grey")
abline(v=where.put, lty="dotted", lwd=0.5, col = "grey")
#y axis
axis(side=2, at=seq(1000,8000,by=500), label=seq(1000,8000,by=500), lwd=1)
#x axis
axis(side=1, at=where.put, label=label[where.put], lwd=0.5)
dev.off()
win.graph()
plot(R, type = "l", lwd = 2, lty = 1, pch = 16, col = "blue3",
frame = TRUE, axes = FALSE, xlab = "Datum",
ylab = expression(R[t]))
# log returns (RATE)
R <- diff(log(data[,2]))
plot(R, type = "l", lwd = 2, lty = 1, pch = 16, col = "blue3",
frame = TRUE, axes = FALSE, xlab = "Datum",
ylab = expression(R[t]))
abline(h=seq(-0.15, 0.1, by = 0.025), lty="dotted", lwd=0.5, col = "grey")
abline(v=where.put, lty="dotted", lwd=0.5, col = "grey")
#y axis
axis(side=2, at=seq(-0.15, 0.1, by = 0.025), label=seq(-0.15, 0.10, by = 0.025), lwd=1)
#x axis
axis(side=1, at=where.put, label=label[where.put], lwd=0.5)
# DAX30 Rate to pdf
pdf("rate_dax30.pdf", width=8, height=6)
plot(R, type = "l", lwd = 2, lty = 1, pch = 16, col = "blue3",
frame = TRUE, axes = FALSE, xlab = "Datum",
ylab = expression(R[t]))
abline(h=seq(-0.15, 0.1, by = 0.025), lty="dotted", lwd=0.5, col = "grey")
abline(v=where.put, lty="dotted", lwd=0.5, col = "grey")
#y axis
axis(side=2, at=seq(-0.15, 0.1, by = 0.025), label=seq(-0.15, 0.10, by = 0.025),
lwd=1)
#x axis
axis(side=1, at=where.put, label=label[where.put], lwd=0.5)
dev.off()
# DAX30 Rate to png
png("rate_dax30.png", width=400, height=300)
plot(R, type = "l", lwd = 2, lty = 1, pch = 16, col = "blue3",
frame = TRUE, axes = FALSE, xlab = "Datum",
ylab = expression(R[t]))
abline(h=seq(-0.15, 0.1, by = 0.025), lty="dotted", lwd=0.5, col = "grey")
abline(v=where.put, lty="dotted", lwd=0.5, col = "grey")
#y axis
axis(side=2, at=seq(-0.15, 0.1, by = 0.025), label=seq(-0.15, 0.10, by = 0.025), lwd=1)
#x axis
axis(side=1, at=where.put, label=label[where.put], lwd=0.5)
dev.off()
win.graph()
k <- hist(R, breaks=44, freq=F, col="yellow2",
xlim=c(-0.075, 0.075), main="", ylab="Dichte")
lines(density(R, bw=0.01, na.rm=T, kernel="epanechnikov"),
col="blue3", lwd=2)
range <- seq(-0.15, 0.15, by = 0.001)
m     <- mean(R)
sdd   <- sd(R)
lines(range, dnorm(range, m, sdd), type="l", lwd=2, col="red3")
lines(range, dt((range-m)/sdd, 5)/sdd, type="l", lwd=2, col="green3")
legend(-0.07, 40, c("Histogram", "Epanechnikov ", "Normal",
"t-Vert.,5 df"),
lty=1, lwd=3, col=c("yellow2", "blue3", "red3", "green3"), bg="white")
# DAX30 Distribution PDF
pdf("distribution_dax30.pdf", width=8, height=6)
k <- hist(R, breaks=44, freq=F, col="yellow2",
xlim=c(-0.075, 0.075), main="", ylab="Dichte")
lines(density(R, bw=0.01, na.rm=T, kernel="epanechnikov"),
col="blue3", lwd=2)
range <- seq(-0.15, 0.15, by = 0.001)
m     <- mean(R)
sdd   <- sd(R)
lines(range, dnorm(range, m, sdd), type="l", lwd=2, col="red3")
lines(range, dt((range-m)/sdd, 5)/sdd, type="l", lwd=2, col="green3")
legend(-0.07, 40, c("Histogram", "Epanechnikov ", "Normal",
"t-Vert.,5 df"),
lty=1, lwd=3, col=c("yellow2", "blue3", "red3", "green3"), bg="white")
dev.off()
# DAX30 Distribution Png
png("distribution_dax30.png", width=400, height=300)
k <- hist(R, breaks=44, freq=F, col="yellow2",
xlim=c(-0.075, 0.075), main="", ylab="Dichte")
lines(density(R, bw=0.01, na.rm=T, kernel="epanechnikov"),
col="blue3", lwd=2)
range <- seq(-0.15, 0.15, by = 0.001)
m     <- mean(R)
sdd   <- sd(R)
lines(range, dnorm(range, m, sdd), type="l", lwd=2, col="red3")
lines(range, dt((range-m)/sdd, 5)/sdd, type="l", lwd=2, col="green3")
legend(-0.07, 40, c("Histogram", "Epanechnikov ", "Normal",
"t-Vert.,5 df"),
lty=1, lwd=3, col=c("yellow2", "blue3", "red3", "green3"), bg="white")
dev.off()
win.graph()
plot.dice = function(panel) {
plot( function(x)
dnorm(x, mean = panel$mean1, sd = panel$sd1),
col = "red3", lwd = 3, xlim = c(-4,4), ylim = c(0,0.6),
xlab = "", ylab = "")
panel
}
panel = rp.control(title = "Normal Distribution")
rp.slider(panel, mean1, -4, 4, log = FALSE, action = plot.dice,
showvalue = TRUE, title = "mu", initval = 0)
rp.slider(panel, sd1, 0.5, 3, log = FALSE, action = plot.dice,
showvalue = TRUE, title = "sd", initval = 1)
library(rpanel)
win.graph()
plot.dice = function(panel) {
plot( function(x)
dnorm(x, mean = panel$mean1, sd = panel$sd1),
col = "red3", lwd = 3, xlim = c(-4,4), ylim = c(0,0.6),
xlab = "", ylab = "")
panel
}
panel = rp.control(title = "Normal Distribution")
rp.slider(panel, mean1, -4, 4, log = FALSE, action = plot.dice,
showvalue = TRUE, title = "mu", initval = 0)
rp.slider(panel, sd1, 0.5, 3, log = FALSE, action = plot.dice,
showvalue = TRUE, title = "sd", initval = 1)
#install.packages("rpanel")
library(rpanel)
win.graph()
plot.dice = function(panel) {
plot( function(x)
dnorm(x, mean = panel$mean1, sd = panel$sd1),
col = "red3", lwd = 3, xlim = c(-4,4), ylim = c(0,0.6),
xlab = "", ylab = "")
panel
}
panel = rp.control(title = "Normal Distribution")
rp.slider(panel, mean1, -4, 4, log = FALSE, action = plot.dice,
showvalue = TRUE, title = "mu", initval = 0)
rp.slider(panel, sd1, 0.5, 3, log = FALSE, action = plot.dice,
showvalue = TRUE, title = "sd", initval = 1)
rm(list=ls())
data <- data.frame(
Years_Exp = c(1.1, 1.3, 1.5, 2.0, 2.2, 2.9, 3.0, 3.2, 3.2, 3.7),
Salary = c(39343.00, 46205.00, 37731.00, 43525.00,
39891.00, 56642.00, 60150.00, 54445.00, 64445.00, 57189.00),
Experience_Score = c(5, 7, 6, 8, 7, 9, 8, 10, 9, 11)
)
ols = lm(data=data, data$Salary ~ data$Years_Exp)
summary(ols)
plot(data$Years_Exp, data$Salary, col="red", lwd=3, xlab="Years of Experience", ylab="Salary", main="Salary vs. Years of Experience")
win.graph()
plot(data$Years_Exp, data$Salary, col="red", lwd=3, xlab="Years of Experience", ylab="Salary", main="Salary vs. Years of Experience")
lines(data$Years_Exp, ols$fitted.values, col="green", lwd=3)
# Menggunakan ggplot
library(ggplot2)
ggplot(data, aes(x = Years_Exp, y = Salary)) +
geom_point(color = "red") +
geom_line(aes(y = ols$fitted.values), color = "green", linewidth = 1) +
labs(x = "Years of Experience", y = "Salary", title = "Salary vs. Years of Experience")
# Menggunakan Plotly (interaktif)
library(plotly)
data %>%
plot_ly(x = ~Years_Exp) %>%
add_markers(y = ~Salary) %>%
add_lines(x = ~Years_Exp, y = fitted(ols))
# Menggunakan library scatterplot3d
library(scatterplot3d)
ols = lm(data=data, data$Salary ~ data$Years_Exp + data$Experience_Score)
sc3d = scatterplot3d(data$Years_Exp, data$Experience_Score, data$Salary, pch=16, type="h", highlight.3d=T)
sc3d$plane3d(ols, lty.box = "solid", col="blue")
# Menggunakan plotly (minusnya, sampai saat ini aku belum tahu bagaimana caranya mengeluarkan fitted plane
plot_ly(data, x=~Years_Exp, y=~Experience_Score, z=~Salary) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Years of Experience'),
yaxis = list(title = 'Experience Score'),
zaxis = list(title = 'Salary')))
sc3d = scatterplot3d(data$Years_Exp, data$Experience_Score, data$Salary, pch=16, type="h", highlight.3d=T)
sc3d$plane3d(ols, lty.box = "solid", col="blue")
# Menggunakan plotly (minusnya, sampai saat ini aku belum tahu bagaimana caranya mengeluarkan fitted plane
plot_ly(data, x=~Years_Exp, y=~Experience_Score, z=~Salary) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Years of Experience'),
yaxis = list(title = 'Experience Score'),
zaxis = list(title = 'Salary')))
